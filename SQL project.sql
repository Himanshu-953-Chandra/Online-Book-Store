
DROP TABLE IF EXISTS Books;
CREATE TABLE Books(
Book_ID SERIAL PRIMARY KEY,
Title VARCHAR(100),
Author VARCHAR(100),
Genre VARCHAR(50),
Published_Year INT,
Price NUMERIC (10, 2),
Stock INT
);

DROP TABLE IF EXISTS customers;
CREATE TABLE Customers (
Customer_ID SERIAL PRIMARY KEY,
Name VARCHAR(100),
Email VARCHAR(100),
Phone VARCHAR(15),
City VARCHAR(50),
Country VARCHAR (150)
);

DROP TABLE IF EXISTS orders;
CREATE TABLE Orders (
Order_ID SERIAL PRIMARY KEY,
Customer_ID INT REFERENCES Customers (Customer_ID),
Book_ID INT REFERENCES Books (Book_ID),
Order_Date DATE,
Quantity INT,
Total_Amount NUMERIC(10,2)
);

SELECT * FROM Books;

SELECT * FROM Customers;

SELECT * FROM Orders;

--BASIC QUESTIONS

--1. Retrive all books of "Fiction" genre
Select * from Books
where Genre='Fiction';

--2. Find book published after 1950
select title from Books
where published_year>1950;

--3. List all customer from canada
select * from Customers
where country='Canada';

--4. Show order placed in  November 2023
select * from Orders
where order_date between '2023-11-1' and '2023-11-30';

--5. Reterive the total stock of books available
select sum(stock) as Total_Stock
from Books;

--6. Find the details of the most expensive book
i- select * from Books 
where price= (select max(price) from Books);
ii- select * from Books order by price Desc limit 1;

--7. Show all the customers who ordered more than 1 book
select * from Orders
where quantity>1;

--8. Reterive all the order where total amount exceed $20
Select * from Orders
where total_amount>20;

--9. List all the genres available in the books table
select distinct genre from Books;

--10. Find the book with the lowest stock
select * from Books order by stock asc limit 1;

--11. Calculate total revenue generated by all the order
select sum(total_amount) as Total_revenue from Orders;

--ADVANCE QUESTIONS

--12. Reterive the total number of book sold for each genre 
select b.Genre, sum(o.quantity) as Total_book_sold
from Orders o 
join Books b on o.book_id= b.book_id
group by b.Genre;

--13. Find the average price of book in 'Fantasy' genre
select AVG(price) as Fantasy_avg
from Books where genre= 'Fantasy';

--14. List customers who have placed at least 2 orders
select c.name ,o.customer_id, count(o.Order_id) as Order_Count
from Customers c
join Orders o on c.customer_id= o.customer_id
group by o.customer_id, c.name
Having count(order_id)>=2;

--15. Find the most frequently ordered book
select o.book_id,b.title,count(o.order_id) as Order_count
from Books b
join Orders o on b.book_id=o.book_id
group by o.book_id, b.title
order by Order_count desc limit 1;

--16. Show top 3 expensive book of Fantasy Genre
select * from Books
where genre='Fantasy'
order by price desc limit 3;

--17. Retrieve the total quantity of books sold by each author
select b.author, sum(o.quantity) as Total_quantity
from Orders o
join Books b on b.book_id = o.book_id
group by b.author;

--18. List the cities where customers who spent over $30 are located
select distinct c.city, total_amount
from Customers c
join Orders o on c.customer_id=o.customer_id
where o.total_amount>30;

--19. Find the customer who spent the most on oders
select c.customer_id, c.name, sum(o.total_amount) as Total_spent
from Customers c
join Orders o on c.customer_id=o.customer_id
group by c.customer_id, c.name
order by Total_spent desc limit 1;

--20. Calculate the stock remaining after fulfilling all orders
select b.book_id, b.title,b.stock, coalesce(sum(quantity),0) as Order_quantity,
(b.stock - COALESCE(SUM(o.quantity), 0)) AS remaining_stock
from Books b
left join Orders o on b.book_id=o.book_id
group by b.book_id;

